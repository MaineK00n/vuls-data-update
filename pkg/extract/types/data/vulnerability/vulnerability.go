package vulnerability

import (
	"cmp"
	"slices"
	"time"

	"github.com/MaineK00n/vuls-data-update/pkg/extract/types/data/cwe"
	"github.com/MaineK00n/vuls-data-update/pkg/extract/types/data/epss"
	"github.com/MaineK00n/vuls-data-update/pkg/extract/types/data/exploit"
	"github.com/MaineK00n/vuls-data-update/pkg/extract/types/data/metasploit"
	"github.com/MaineK00n/vuls-data-update/pkg/extract/types/data/reference"
	"github.com/MaineK00n/vuls-data-update/pkg/extract/types/data/severity"
	"github.com/MaineK00n/vuls-data-update/pkg/extract/types/data/snort"
)

type Vulnerability struct {
	ID          string                  `json:"id,omitempty"`
	Title       string                  `json:"title,omitempty"`
	Description string                  `json:"description,omitempty"`
	Severity    []severity.Severity     `json:"severity,omitempty"`
	CWE         []cwe.CWE               `json:"cwe,omitempty"`
	Exploit     []exploit.Exploit       `json:"exploit,omitempty"`
	Metasploit  []metasploit.Metasploit `json:"metasploit,omitempty"`
	EPSS        []epss.EPSS             `json:"epss,omitempty"`
	Snort       []snort.Snort           `json:"snort,omitempty"`
	References  []reference.Reference   `json:"references,omitempty"`
	Published   *time.Time              `json:"published,omitempty"`
	Modified    *time.Time              `json:"modified,omitempty"`
	Optional    map[string]interface{}  `json:"optional,omitempty"`
}

func (v *Vulnerability) Sort() {
	slices.SortFunc(v.Severity, severity.Compare)

	for i := range v.CWE {
		(&v.CWE[i]).Sort()
	}
	slices.SortFunc(v.CWE, cwe.Compare)

	slices.SortFunc(v.Exploit, exploit.Compare)

	for i := range v.Metasploit {
		(&v.Metasploit[i]).Sort()
	}
	slices.SortFunc(v.Metasploit, metasploit.Compare)

	slices.SortFunc(v.EPSS, epss.Compare)

	slices.SortFunc(v.Snort, snort.Compare)

	slices.SortFunc(v.References, reference.Compare)
}

func Compare(x, y Vulnerability) int {
	return cmp.Or(
		cmp.Compare(x.ID, y.ID),
		cmp.Compare(x.Title, y.Title),
		cmp.Compare(x.Description, y.Description),
		slices.CompareFunc(x.Severity, y.Severity, severity.Compare),
		slices.CompareFunc(x.CWE, y.CWE, cwe.Compare),
		slices.CompareFunc(x.Exploit, y.Exploit, exploit.Compare),
		slices.CompareFunc(x.Metasploit, y.Metasploit, metasploit.Compare),
		slices.CompareFunc(x.EPSS, y.EPSS, epss.Compare),
		slices.CompareFunc(x.Snort, y.Snort, snort.Compare),
		slices.CompareFunc(x.References, y.References, reference.Compare),
		func() int {
			switch {
			case x.Published == nil && y.Published == nil:
				return 0
			case x.Published == nil && y.Published != nil:
				return -1
			case x.Published != nil && y.Published == nil:
				return +1
			default:
				return (*x.Published).Compare(*y.Published)
			}
		}(),
		func() int {
			switch {
			case x.Modified == nil && y.Modified == nil:
				return 0
			case x.Modified == nil && y.Modified != nil:
				return -1
			case x.Modified != nil && y.Modified == nil:
				return +1
			default:
				return (*x.Modified).Compare(*y.Modified)
			}
		}(),
	)
}
