package exploitdb_test

import (
	"io/fs"
	"net/http"
	"net/http/httptest"
	"net/url"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"

	"github.com/MaineK00n/vuls-data-update/pkg/fetch/exploit/exploitdb"
)

func TestFetch(t *testing.T) {
	tests := []struct {
		name     string
		file     exploitdb.ExploitDBURL
		hasError bool
	}{
		{
			name: "happy path",
			file: exploitdb.ExploitDBURL{
				Exploits:   "testdata/fixtures/files_exploits.csv",
				Shellcodes: "testdata/fixtures/files_shellcodes.csv",
				Papers:     "testdata/fixtures/files_papers.csv",
				GHDB:       "testdata/fixtures/ghdb.xml",
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				http.ServeFile(w, r, strings.TrimPrefix(r.URL.Path, "/"))
			}))
			defer ts.Close()

			shellcodes, err := url.JoinPath(ts.URL, tt.file.Shellcodes)
			if err != nil {
				t.Error("unexpected error:", err)
			}
			exploits, err := url.JoinPath(ts.URL, tt.file.Exploits)
			if err != nil {
				t.Error("unexpected error:", err)
			}
			papers, err := url.JoinPath(ts.URL, tt.file.Papers)
			if err != nil {
				t.Error("unexpected error:", err)
			}
			ghdb, err := url.JoinPath(ts.URL, tt.file.GHDB)
			if err != nil {
				t.Error("unexpected error:", err)
			}
			dir := t.TempDir()
			err = exploitdb.Fetch(exploitdb.WithExploitDBURL(&exploitdb.ExploitDBURL{
				Shellcodes: shellcodes,
				Exploits:   exploits,
				Papers:     papers,
				GHDB:       ghdb,
			}), exploitdb.WithDir(dir), exploitdb.WithRetry(0))
			switch {
			case err != nil && !tt.hasError:
				t.Error("unexpected error:", err)
			case err == nil && tt.hasError:
				t.Error("expected error has not occurred")
			}

			if err := filepath.WalkDir(dir, func(path string, d fs.DirEntry, err error) error {
				if err != nil {
					return err
				}

				if d.IsDir() {
					return nil
				}

				dir, file := filepath.Split(path)
				want, err := os.ReadFile(filepath.Join("testdata", "golden", filepath.Base(dir), file))
				if err != nil {
					return err
				}

				got, err := os.ReadFile(path)
				if err != nil {
					return err
				}

				if diff := cmp.Diff(want, got); diff != "" {
					t.Errorf("Fetch(). (-expected +got):\n%s", diff)
				}

				return nil
			}); err != nil {
				t.Error("walk error:", err)
			}
		})
	}
}
