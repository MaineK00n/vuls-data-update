package inthewild

import (
	"bytes"
	"database/sql"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/cheggaaa/pb/v3"
	"github.com/pkg/errors"
	_ "modernc.org/sqlite"

	"github.com/MaineK00n/vuls-data-update/pkg/fetch/util"
	utilhttp "github.com/MaineK00n/vuls-data-update/pkg/fetch/util/http"
)

const dbURL = "https://pub-4c1eae2a180542b19ea7c88f1e4ccf07.r2.dev/inthewild.db"

// https://www.sqlite.org/fileformat.html
var sqlite3HeaderMagic = []byte("SQLite format 3\x00")

type options struct {
	dbURL string
	dir   string
	retry int
}

type Option interface {
	apply(*options)
}

type dbURLOption string

func (u dbURLOption) apply(opts *options) {
	opts.dbURL = string(u)
}

func WithDBURL(url string) Option {
	return dbURLOption(url)
}

type dirOption string

func (d dirOption) apply(opts *options) {
	opts.dir = string(d)
}

func WithDir(dir string) Option {
	return dirOption(dir)
}

type retryOption int

func (r retryOption) apply(opts *options) {
	opts.retry = int(r)
}

func WithRetry(retry int) Option {
	return retryOption(retry)
}

func Fetch(opts ...Option) error {
	options := &options{
		dbURL: dbURL,
		dir:   filepath.Join(util.CacheDir(), "fetch", "exploit", "inthewild"),
		retry: 3,
	}

	for _, o := range opts {
		o.apply(options)
	}

	if err := util.RemoveAll(options.dir); err != nil {
		return errors.Wrapf(err, "remove %s", options.dir)
	}

	log.Println("[INFO] Fetch inthewild")
	tempDir, err := os.MkdirTemp("", "vuls-data-update")
	if err != nil {
		return errors.Wrapf(err, "mkdir %s", tempDir)
	}
	defer os.RemoveAll(tempDir)

	dbPath := filepath.Join(tempDir, "inthewild.db")
	f, err := os.Create(dbPath)
	if err != nil {
		return errors.Wrapf(err, "create %s", dbPath)
	}
	defer f.Close()

	resp, err := utilhttp.NewClient(utilhttp.WithClientRetryMax(options.retry)).Get(options.dbURL)
	if err != nil {
		return errors.Wrap(err, "fetch inthewild db")
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		_, _ = io.Copy(io.Discard, resp.Body)
		return errors.Errorf("error request response with status code %d", resp.StatusCode)
	}

	bs, err := io.ReadAll(resp.Body)
	if err != nil {
		return errors.Wrap(err, "read all response body")
	}

	if !bytes.Equal(bs[:16], sqlite3HeaderMagic) {
		return errors.New("not sqlite3 database")
	}
	if _, err := f.Write(bs); err != nil {
		return errors.Wrap(err, "write db")
	}

	db, err := sql.Open("sqlite", dbPath)
	if err != nil {
		return errors.Wrap(err, "open db")
	}
	defer db.Close()

	rows, err := db.Query("SELECT exploits.id, exploits.referenceURL, exploits.timestamp, exploits.source, exploits.type FROM exploits")
	if err != nil {
		return errors.Wrap(err, "select exploits table")
	}
	defer rows.Close()

	es := make(map[string]Exploit)
	for rows.Next() {
		var (
			cve string
			ref Reference
		)
		if err := rows.Scan(&cve, &ref.URL, &ref.TimeStamp, &ref.Source, &ref.Type); err != nil {
			return errors.Wrap(err, "scan row")
		}

		cve = strings.TrimSpace(strings.ReplaceAll(cve, "â€“", "-"))

		e, ok := es[cve]
		if !ok {
			e = Exploit{ID: cve}
		}
		e.References = append(e.References, ref)
		es[cve] = e
	}

	bar := pb.StartNew(len(es))
	for _, e := range es {
		d := "others"
		if strings.HasPrefix(e.ID, "CVE-") {
			splitted, err := util.Split(e.ID, "-", "-")
			if err != nil {
				log.Printf("[WARN] unexpected ID format. expected: %q, actual: %q", "CVE-yyyy-\\d{4,}", e.ID)
				continue
			}
			if _, err := time.Parse("2006", splitted[1]); err != nil {
				log.Printf("[WARN] unexpected ID format. expected: %q, actual: %q", "CVE-yyyy-\\d{4,}", e.ID)
				continue
			}
			d = splitted[1]
		}

		if err := util.Write(filepath.Join(options.dir, d, fmt.Sprintf("%s.json", e.ID)), e); err != nil {
			return errors.Wrapf(err, "write %s", filepath.Join(options.dir, d, fmt.Sprintf("%s.json", e.ID)))
		}

		bar.Increment()
	}
	bar.Finish()

	return nil
}
