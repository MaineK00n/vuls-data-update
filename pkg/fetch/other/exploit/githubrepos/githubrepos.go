package githubrepos

import (
	"encoding/json"
	"fmt"
	"io/fs"
	"log"
	"net/url"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/cheggaaa/pb/v3"
	"github.com/pkg/errors"

	"github.com/MaineK00n/vuls-data-update/pkg/fetch/util"
)

const defaultRepoURL = "https://github.com/nomi-sec/PoC-in-GitHub.git"

type options struct {
	repoURL string
	dir     string
	retry   int
}

type Option interface {
	apply(*options)
}

type repoURLOption string

func (u repoURLOption) apply(opts *options) {
	opts.repoURL = string(u)
}

func WithRepoURL(repoURL string) Option {
	return repoURLOption(repoURL)
}

type dirOption string

func (d dirOption) apply(opts *options) {
	opts.dir = string(d)
}

func WithDir(dir string) Option {
	return dirOption(dir)
}

type retryOption int

func (r retryOption) apply(opts *options) {
	opts.retry = int(r)
}

func WithRetry(retry int) Option {
	return retryOption(retry)
}

func Fetch(opts ...Option) error {
	options := &options{
		repoURL: defaultRepoURL,
		dir:     filepath.Join(util.SourceDir(), "exploit", "githubrepos"),
		retry:   3,
	}

	for _, o := range opts {
		o.apply(options)
	}

	log.Println("[INFO] Fetch Poc-in-GitHub")
	cloneDir := filepath.Join(util.CacheDir(), "PoC-in-GitHub")
	if err := os.RemoveAll(cloneDir); err != nil {
		return errors.Wrapf(err, "remove %s", cloneDir)
	}
	if err := os.MkdirAll(cloneDir, os.ModePerm); err != nil {
		return errors.Wrapf(err, "mkdir %s", cloneDir)
	}

	if err := exec.Command("git", "clone", "--depth", "1", options.repoURL, cloneDir).Run(); err != nil {
		return errors.Wrapf(err, "git clone --depth 1 %s %s", options.repoURL, cloneDir)
	}

	var es []Exploit
	if err := filepath.WalkDir(cloneDir, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}

		if d.IsDir() {
			return nil
		}

		file := filepath.Base(path)
		if !strings.HasPrefix(file, "CVE-") {
			return nil
		}

		f, err := os.Open(path)
		if err != nil {
			return errors.Wrapf(err, "open %s", path)
		}
		defer f.Close()

		var rs []response
		if err := json.NewDecoder(f).Decode(&rs); err != nil {
			return errors.Wrap(err, "decode json")
		}

		e := Exploit{ID: strings.TrimSuffix(file, ".json")}
		for _, r := range rs {
			var desc string
			if r.Description != nil {
				desc = *r.Description
			}
			u, err := url.JoinPath("https://github.com", r.FullName)
			if err != nil {
				log.Printf(`[WARN] url.JoinPath("https://github.com", %s) = %s`, r.FullName, err)
				continue
			}
			e.Repositories = append(e.Repositories, Repository{
				Name:        r.FullName,
				Description: desc,
				Topics:      r.Topics,
				Stars:       r.StargazersCount,
				Forks:       r.ForksCount,
				Watches:     r.WatchersCount,
				CreatedAt:   &r.CreatedAt,
				UpdatedAt:   &r.UpdatedAt,
				PushedAt:    &r.PushedAt,
				URL:         u,
			})
		}
		es = append(es, e)

		return nil
	}); err != nil {
		return err
	}

	if err := os.RemoveAll(options.dir); err != nil {
		return errors.Wrapf(err, "remove %s", options.dir)
	}

	bar := pb.StartNew(len(es))
	for _, e := range es {
		if err := func() error {
			y := strings.Split(e.ID, "-")[1]

			if err := os.MkdirAll(filepath.Join(options.dir, y), os.ModePerm); err != nil {
				return errors.Wrapf(err, "mkdir %s", filepath.Join(options.dir, y))
			}

			f, err := os.Create(filepath.Join(options.dir, y, fmt.Sprintf("%s.json", e.ID)))
			if err != nil {
				return errors.Wrapf(err, "create %s", filepath.Join(options.dir, y, fmt.Sprintf("%s.json", e.ID)))
			}
			defer f.Close()

			enc := json.NewEncoder(f)
			enc.SetIndent("", "  ")
			if err := enc.Encode(e); err != nil {
				return errors.Wrap(err, "encode data")
			}
			return nil
		}(); err != nil {
			return err
		}

		bar.Increment()
	}
	bar.Finish()

	if err := os.RemoveAll(cloneDir); err != nil {
		return errors.Wrapf(err, "remove %s", cloneDir)
	}

	return nil
}
