package exploitdb

import (
	"encoding/json"
	"fmt"
	"io"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/pkg/errors"

	"github.com/MaineK00n/vuls-data-update/pkg/build"
	"github.com/MaineK00n/vuls-data-update/pkg/build/util"
)

type options struct {
	srcDir  string
	destDir string
}

type Option interface {
	apply(*options)
}

type srcDirOption string

func (d srcDirOption) apply(opts *options) {
	opts.srcDir = string(d)
}

func WithSrcDir(dir string) Option {
	return srcDirOption(dir)
}

type destDirOption string

func (d destDirOption) apply(opts *options) {
	opts.destDir = string(d)
}

func WithDestDir(dir string) Option {
	return destDirOption(dir)
}

func Build(opts ...Option) error {
	options := &options{
		srcDir:  filepath.Join(util.SourceDir(), "exploit", "exploitdb"),
		destDir: filepath.Join(util.DestDir(), "vulnerability"),
	}

	for _, o := range opts {
		o.apply(options)
	}

	for _, target := range []string{"exploits", "papers", "shellcodes"} {
		if err := filepath.WalkDir(filepath.Join(options.srcDir, target), func(path string, d fs.DirEntry, err error) error {
			if err != nil {
				return err
			}

			if d.IsDir() {
				return nil
			}

			sf, err := os.Open(path)
			if err != nil {
				return errors.Wrapf(err, "open %s", path)
			}
			defer sf.Close()

			var sv exploit
			if err := json.NewDecoder(sf).Decode(&sv); err != nil {
				return errors.Wrap(err, "decode json")
			}

			for _, cve := range sv.CVEs {
				y := strings.Split(cve, "-")[1]
				if err := os.MkdirAll(filepath.Join(options.destDir, y), os.ModePerm); err != nil {
					return errors.Wrapf(err, "mkdir %s", filepath.Join(options.destDir, y))
				}

				df, err := os.OpenFile(filepath.Join(options.destDir, y, fmt.Sprintf("%s.json", cve)), os.O_RDWR|os.O_CREATE|os.O_APPEND, 0644)
				if err != nil {
					return errors.Wrapf(err, "open %s", filepath.Join(options.destDir, y, fmt.Sprintf("%s.json", cve)))
				}
				defer df.Close()

				var dv build.Vulnerability
				if err := json.NewDecoder(df).Decode(&dv); err != nil && !errors.Is(err, io.EOF) {
					return errors.Wrap(err, "decode json")
				}

				fillVulnerability(target, cve, &sv, &dv)

				if err := df.Truncate(0); err != nil {
					return errors.Wrap(err, "truncate file")
				}
				if _, err := df.Seek(0, 0); err != nil {
					return errors.Wrap(err, "set offset")
				}
				enc := json.NewEncoder(df)
				enc.SetIndent("", "  ")
				if err := enc.Encode(dv); err != nil {
					return errors.Wrap(err, "encode json")
				}
			}

			return nil
		}); err != nil {
			return errors.Wrap(err, "walk exploitdb")
		}
	}

	return nil
}

func fillVulnerability(target, cve string, sv *exploit, dv *build.Vulnerability) {
	if dv.ID == "" {
		dv.ID = cve
	}

	if dv.Exploit == nil {
		dv.Exploit = &build.Exploit{}
	}
	switch target {
	case "exploits":
		dv.Exploit.ExploitDB = append(dv.Exploit.ExploitDB, build.ExploitDB{
			ID:          sv.ID,
			Type:        "exploit",
			Description: sv.Description,
			URL:         fmt.Sprintf("https://www.exploit-db.com/exploits/%s", sv.ID),
			FileURL:     fmt.Sprintf("https://github.com/offensive-security/exploitdb/tree/master/%s", sv.File),
		})
	case "shellcodes":
		dv.Exploit.ExploitDB = append(dv.Exploit.ExploitDB, build.ExploitDB{
			ID:          sv.ID,
			Type:        "shellcode",
			Description: sv.Description,
			URL:         fmt.Sprintf("https://www.exploit-db.com/shellcodes/%s", sv.ID),
			FileURL:     fmt.Sprintf("https://github.com/offensive-security/exploitdb/tree/master/%s", sv.File),
		})
	case "papers":
		dv.Exploit.ExploitDB = append(dv.Exploit.ExploitDB, build.ExploitDB{
			ID:          sv.ID,
			Type:        "paper",
			Description: sv.Description,
			URL:         fmt.Sprintf("https://www.exploit-db.com/%s/%s", strings.Split(sv.File, string(os.PathSeparator))[0], sv.ID),
			FileURL:     fmt.Sprintf("https://github.com/offensive-security/exploitdb-papers/tree/master/%s", sv.File),
		})
	default:
		log.Printf(`[WARN] unexpected target. accepts: ["exploits", "shellcodes", "papers"], received: "%s"`, target)
		return
	}
}
