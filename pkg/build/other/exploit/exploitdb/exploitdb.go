package exploitdb

import (
	"encoding/json"
	"fmt"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/pkg/errors"

	"github.com/MaineK00n/vuls-data-update/pkg/build"
	"github.com/MaineK00n/vuls-data-update/pkg/build/util"
)

type options struct {
	srcDir             string
	srcCompressFormat  string
	destDir            string
	destCompressFormat string
}

type Option interface {
	apply(*options)
}

type srcDirOption string

func (d srcDirOption) apply(opts *options) {
	opts.srcDir = string(d)
}

func WithSrcDir(dir string) Option {
	return srcDirOption(dir)
}

type srcCompressFormatOption string

func (d srcCompressFormatOption) apply(opts *options) {
	opts.srcCompressFormat = string(d)
}

func WithSrcCompressFormat(compress string) Option {
	return srcCompressFormatOption(compress)
}

type destDirOption string

func (d destDirOption) apply(opts *options) {
	opts.destDir = string(d)
}

func WithDestDir(dir string) Option {
	return destDirOption(dir)
}

type destCompressFormatOption string

func (d destCompressFormatOption) apply(opts *options) {
	opts.destCompressFormat = string(d)
}

func WithDestCompressFormat(compress string) Option {
	return destCompressFormatOption(compress)
}

func Build(opts ...Option) error {
	options := &options{
		srcDir:             filepath.Join(util.SourceDir(), "exploit", "exploitdb"),
		srcCompressFormat:  "",
		destDir:            filepath.Join(util.DestDir(), "vulnerability"),
		destCompressFormat: "",
	}

	for _, o := range opts {
		o.apply(options)
	}

	log.Println("[INFO] Build ExploitDB")
	for _, target := range []string{"exploits", "papers", "shellcodes"} {
		if err := filepath.WalkDir(filepath.Join(options.srcDir, target), func(path string, d fs.DirEntry, err error) error {
			if err != nil {
				return err
			}

			if d.IsDir() {
				return nil
			}

			sbs, err := util.Open(path, options.srcCompressFormat)
			if err != nil {
				return errors.Wrapf(err, "open %s", path)
			}

			var sv exploit
			if err := json.Unmarshal(sbs, &sv); err != nil {
				return errors.Wrap(err, "decode json")
			}

			for _, cve := range sv.CVEs {
				y := strings.Split(cve, "-")[1]
				if _, err := strconv.Atoi(y); err != nil {
					log.Printf(`[WARN] unexpected CVE-ID. accepts: "CVE-yyyy-XXXX", received: "%s"`, cve)
					continue
				}

				dbs, err := util.Open(util.BuildFilePath(filepath.Join(options.destDir, y, fmt.Sprintf("%s.json", cve)), options.destCompressFormat), options.destCompressFormat)
				if err != nil {
					return errors.Wrapf(err, "open %s", filepath.Join(options.destDir, y, cve))
				}

				var dv build.Vulnerability
				if len(dbs) > 0 {
					if err := json.Unmarshal(dbs, &dv); err != nil {
						return errors.Wrap(err, "unmarshal json")
					}
				}

				fillVulnerability(&dv, &sv, target, cve)

				dbs, err = json.Marshal(dv)
				if err != nil {
					return errors.Wrap(err, "marshal json")
				}

				if err := util.Write(util.BuildFilePath(filepath.Join(options.destDir, y, fmt.Sprintf("%s.json", cve)), options.destCompressFormat), dbs, options.destCompressFormat); err != nil {
					return errors.Wrapf(err, "write %s", filepath.Join(options.destDir, y, cve))
				}
			}

			return nil
		}); err != nil {
			return errors.Wrap(err, "walk exploitdb")
		}
	}

	return nil
}

func fillVulnerability(dv *build.Vulnerability, sv *exploit, target, cve string) {
	if dv.ID == "" {
		dv.ID = cve
	}

	if dv.Exploit == nil {
		dv.Exploit = &build.Exploit{}
	}
	switch target {
	case "exploits":
		dv.Exploit.ExploitDB = append(dv.Exploit.ExploitDB, build.ExploitDB{
			ID:          sv.ID,
			Type:        "exploit",
			Description: sv.Description,
			URL:         fmt.Sprintf("https://www.exploit-db.com/exploits/%s", sv.ID),
			FileURL:     fmt.Sprintf("https://github.com/offensive-security/exploitdb/tree/master/%s", sv.File),
		})
	case "shellcodes":
		dv.Exploit.ExploitDB = append(dv.Exploit.ExploitDB, build.ExploitDB{
			ID:          sv.ID,
			Type:        "shellcode",
			Description: sv.Description,
			URL:         fmt.Sprintf("https://www.exploit-db.com/shellcodes/%s", sv.ID),
			FileURL:     fmt.Sprintf("https://github.com/offensive-security/exploitdb/tree/master/%s", sv.File),
		})
	case "papers":
		dv.Exploit.ExploitDB = append(dv.Exploit.ExploitDB, build.ExploitDB{
			ID:          sv.ID,
			Type:        "paper",
			Description: sv.Description,
			URL:         fmt.Sprintf("https://www.exploit-db.com/%s/%s", strings.Split(sv.File, string(os.PathSeparator))[0], sv.ID),
			FileURL:     fmt.Sprintf("https://github.com/offensive-security/exploitdb-papers/tree/master/%s", sv.File),
		})
	default:
		log.Printf(`[WARN] unexpected target. accepts: ["exploits", "shellcodes", "papers"], received: "%s"`, target)
		return
	}
}
