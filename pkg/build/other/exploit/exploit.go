package exploit

import (
	"path/filepath"

	"github.com/pkg/errors"

	"github.com/MaineK00n/vuls-data-update/pkg/build/other/exploit/exploitdb"
	"github.com/MaineK00n/vuls-data-update/pkg/build/other/exploit/githubrepos"
	"github.com/MaineK00n/vuls-data-update/pkg/build/other/exploit/inthewild"
	"github.com/MaineK00n/vuls-data-update/pkg/build/other/exploit/trickest"
	"github.com/MaineK00n/vuls-data-update/pkg/build/util"
)

type options struct {
	srcDir             string
	srcCompressFormat  string
	destDir            string
	destCompressFormat string
}

type Option interface {
	apply(*options)
}

type srcDirOption string

func (d srcDirOption) apply(opts *options) {
	opts.srcDir = string(d)
}

func WithSrcDir(dir string) Option {
	return srcDirOption(dir)
}

type srcCompressFormatOption string

func (d srcCompressFormatOption) apply(opts *options) {
	opts.srcCompressFormat = string(d)
}

func WithSrcCompressFormat(compress string) Option {
	return srcCompressFormatOption(compress)
}

type destDirOption string

func (d destDirOption) apply(opts *options) {
	opts.destDir = string(d)
}

func WithDestDir(dir string) Option {
	return destDirOption(dir)
}

type destCompressFormatOption string

func (d destCompressFormatOption) apply(opts *options) {
	opts.destCompressFormat = string(d)
}

func WithDestCompressFormat(compress string) Option {
	return destCompressFormatOption(compress)
}

func Build(opts ...Option) error {
	options := &options{
		srcDir:             filepath.Join(util.SourceDir(), "exploit"),
		srcCompressFormat:  "",
		destDir:            filepath.Join(util.DestDir(), "vulnerability"),
		destCompressFormat: "",
	}

	for _, o := range opts {
		o.apply(options)
	}

	if err := exploitdb.Build(exploitdb.WithSrcDir(filepath.Join(options.srcDir, "exploitdb")), exploitdb.WithSrcCompressFormat(options.srcCompressFormat), exploitdb.WithDestDir(options.destDir), exploitdb.WithDestCompressFormat(options.destCompressFormat)); err != nil {
		return errors.Wrap(err, "build exploitdb")
	}

	if err := githubrepos.Build(githubrepos.WithSrcDir(filepath.Join(options.srcDir, "githubrepos")), githubrepos.WithSrcCompressFormat(options.srcCompressFormat), githubrepos.WithDestDir(options.destDir), githubrepos.WithDestCompressFormat(options.destCompressFormat)); err != nil {
		return errors.Wrap(err, "build githubrepos")
	}

	if err := inthewild.Build(inthewild.WithSrcDir(filepath.Join(options.srcDir, "inthewild")), inthewild.WithSrcCompressFormat(options.srcCompressFormat), inthewild.WithDestDir(options.destDir), inthewild.WithDestCompressFormat(options.destCompressFormat)); err != nil {
		return errors.Wrap(err, "build inthewild")
	}

	if err := trickest.Build(trickest.WithSrcDir(filepath.Join(options.srcDir, "trickest")), trickest.WithSrcCompressFormat(options.srcCompressFormat), trickest.WithDestDir(options.destDir), trickest.WithDestCompressFormat(options.destCompressFormat)); err != nil {
		return errors.Wrap(err, "build trickest")
	}

	return nil
}
