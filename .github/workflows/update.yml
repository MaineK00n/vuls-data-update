name: Update vuls-data
on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:

jobs:
  fetch:
    name: fetch vuls-data-source
    runs-on: ubuntu-latest
    steps:
      - name: set Git config
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}
          submodules: recursive

      - name: update source submodule
        run: git submodule update --remote --recursive source

      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'

      - name: go install
        run: go install ./cmd/vuls-data-update

      - name: check disk size
        run: df -h --total

      - name: check .git source output size
        run: du -sh .git source output

      - name: fetch os alma
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 os alma
          cd source
          git add alma
          git commit --allow-empty -m "update alma"
          git push origin HEAD:main
          cd ..

      - name: fetch os alpine
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 os alpine
          cd source
          git add alpine
          git commit --allow-empty -m "update alpine"
          git push origin HEAD:main
          cd ..

      - name: fetch os amazon
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 os amazon
          cd source
          git add amazon
          git commit --allow-empty -m "update amazon"
          git push origin HEAD:main
          cd ..

      - name: fetch os arch
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 os arch
          cd source
          git add arch
          git commit --allow-empty -m "update arch"
          git push origin HEAD:main
          cd ..

      - name: fetch os debian
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 os debian
          cd source
          git add debian
          git commit --allow-empty -m "update debian"
          git push origin HEAD:main
          cd ..

      # - name: fetch os epel
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 os epel
      #     cd source
      #     git add epel
      #     git commit --allow-empty -m "update epel"
      #     git push origin HEAD:main
      #     cd ..

      # - name: fetch os fedora
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 os fedora
      #     cd source
      #     git add fedora
      #     git commit --allow-empty -m "update fedora"
      #     git push origin HEAD:main
      #     cd ..

      - name: fetch os freebsd
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 os freebsd
          cd source
          git add freebsd
          git commit --allow-empty -m "update freebsd"
          git push origin HEAD:main
          cd ..

      # - name: fetch os gentoo
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 os gentoo
      #     cd source
      #     git add gentoo
      #     git commit --allow-empty -m "update gentoo"
      #     git push origin HEAD:main
      #     cd ..

      - name: fetch os oracle
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 os oracle
          cd source
          git add oracle
          git commit --allow-empty -m "update oracle"
          git push origin HEAD:main
          cd ..

      - name: fetch os redhat
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 os redhat
          cd source
          git add redhat
          git commit --allow-empty -m "update redhat"
          git push origin HEAD:main
          cd ..

      # - name: fetch os rocky
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 os rocky
      #     cd source
      #     git add rocky
      #     git commit --allow-empty -m "update rocky"
      #     git push origin HEAD:main
      #     cd ..

      - name: fetch os suse
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 os suse
          cd source
          git add suse
          git commit --allow-empty -m "update suse"
          git push origin HEAD:main
          cd ..

      - name: fetch os ubuntu
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 os ubuntu
          cd source
          git add ubuntu
          git commit --allow-empty -m "update ubuntu"
          git push origin HEAD:main
          cd ..

      # - name: fetch os windows
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 os windows
      #     cd source
      #     git add windows
      #     git commit --allow-empty -m "update windows"
      #     git push origin HEAD:main
      #     cd ..

      # - name: fetch library cargo
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 library cargo
      #     cd source
      #     git add cargo
      #     git commit --allow-empty -m "update cargo"
      #     git push origin HEAD:main
      #     cd ..

      # - name: fetch library composer
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 library composer
      #     cd source
      #     git add composer
      #     git commit --allow-empty -m "update composer"
      #     git push origin HEAD:main
      #     cd ..

      # - name: fetch library conan
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 library conan
      #     cd source
      #     git add conan
      #     git commit --allow-empty -m "update conan"
      #     git push origin HEAD:main
      #     cd ..

      # - name: fetch library erlang
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 library erlang
      #     cd source
      #     git add erlang
      #     git commit --allow-empty -m "update erlang"
      #     git push origin HEAD:main
      #     cd ..

      # - name: fetch library golang
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 library golang
      #     cd source
      #     git add golang
      #     git commit --allow-empty -m "update golang"
      #     git push origin HEAD:main
      #     cd ..

      # - name: fetch library maven
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 library maven
      #     cd source
      #     git add maven
      #     git commit --allow-empty -m "update maven"
      #     git push origin HEAD:main
      #     cd ..

      # - name: fetch library npm
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 library npm
      #     cd source
      #     git add npm
      #     git commit --allow-empty -m "update npm"
      #     git push origin HEAD:main
      #     cd ..

      # - name: fetch library nuget
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 library nuget
      #     cd source
      #     git add nuget
      #     git commit --allow-empty -m "update nuget"
      #     git push origin HEAD:main
      #     cd ..

      # - name: fetch library pip
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 library pip
      #     cd source
      #     git add pip
      #     git commit --allow-empty -m "update pip"
      #     git push origin HEAD:main
      #     cd ..

      # - name: fetch library rubygems
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 library rubygems
      #     cd source
      #     git add rubygems
      #     git commit --allow-empty -m "update rubygems"
      #     git push origin HEAD:main
      #     cd ..

      # - name: fetch other attack
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 other attack
      #     cd source
      #     git add attack
      #     git commit --allow-empty -m "update attack"
      #     git push origin HEAD:main
      #     cd ..

      # - name: fetch other capec
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update fetch --compress-format=bzip2 other capec
      #     cd source
      #     git add capec
      #     git commit --allow-empty -m "update capec"
      #     git push origin HEAD:main
      #     cd ..

      - name: fetch other cwe
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 other cwe
          cd source
          git add cwe
          git commit --allow-empty -m "update cwe"
          git push origin HEAD:main
          cd ..

      - name: fetch other epss
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 other epss
          cd source
          git add epss
          git commit --allow-empty -m "update epss"
          git push origin HEAD:main
          cd ..

      - name: fetch other exploit
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 other exploit
          cd source
          git add exploit
          git commit --allow-empty -m "update exploit"
          git push origin HEAD:main
          cd ..

      - name: fetch other jvn
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 other jvn
          cd source
          git add jvn
          git commit --allow-empty -m "update jvn"
          git push origin HEAD:main
          cd ..

      - name: fetch other kev
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 other kev
          cd source
          git add kev
          git commit --allow-empty -m "update kev"
          git push origin HEAD:main
          cd ..

      - name: fetch other mitre
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 other mitre
          cd source
          git add mitre
          git commit --allow-empty -m "update mitre"
          git push origin HEAD:main
          cd ..

      - name: fetch other msf
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 other msf
          cd source
          git add msf
          git commit --allow-empty -m "update msf"
          git push origin HEAD:main
          cd ..

      - name: fetch other nvd
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update fetch --compress-format=bzip2 other nvd
          cd source
          git add nvd
          git commit --allow-empty -m "update nvd"
          git push origin HEAD:main
          cd ..

      - name: update source submodule commit
        run: |
          git pull
          git add source
          git commit -m "chore(ci): update source submodule"
          git push

  build:
     name: build vuls-data-source
     runs-on: ubuntu-latest
     if: ${{ always() }}
     needs: fetch
     steps:
      - name: set Git config
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}
          submodules: recursive

      - name: update source and output submodule
        run: git submodule update --remote --recursive source output

      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'

      - name: go install
        run: go install ./cmd/vuls-data-update

      - name: check disk size
        run: df -h --total

      - name: check .git source output size
        run: du -sh .git source output

      - name: remove output
        run: rm -rf output

      - name: build mitre
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 mitre
          rm -rf source/mitre
          cd output
          git add mitre
          git commit --allow-empty -m "update mitre"
          git push origin HEAD:main
          cd ..

      - name: build nvd
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 nvd
          rm -rf source/nvd
          cd output
          git add nvd
          git commit --allow-empty -m "update nvd"
          git push origin HEAD:main
          cd ..

      - name: build jvn
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 jvn
          rm -rf source/jvn
          cd output
          git add jvn
          git commit --allow-empty -m "update jvn"
          git push origin HEAD:main
          cd ..

      - name: build msf
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 msf
          rm -rf source/msf
          cd output
          git add msf
          git commit --allow-empty -m "update msf"
          git push origin HEAD:main
          cd ..

      - name: build exploit
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 exploit
          rm -rf source/exploit
          cd output
          git add exploit
          git commit --allow-empty -m "update exploit"
          git push origin HEAD:main
          cd ..

      - name: build kev
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 kev
          rm -rf source/kev
          cd output
          git add kev
          git commit --allow-empty -m "update kev"
          git push origin HEAD:main
          cd ..

      - name: build epss
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 epss
          rm -rf source/epss
          cd output
          git add epss
          git commit --allow-empty -m "update epss"
          git push origin HEAD:main
          cd ..

      - name: build alma
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 alma
          rm -rf source/alma
          cd output
          git add alma
          git commit --allow-empty -m "update alma"
          git push origin HEAD:main
          cd ..

      - name: build alpine
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 alpine
          rm -rf source/alpine
          cd output
          git add alpine
          git commit --allow-empty -m "update alpine"
          git push origin HEAD:main
          cd ..

      - name: build amazon
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 amazon
          rm -rf source/amazon
          cd output
          git add amazon
          git commit --allow-empty -m "update amazon"
          git push origin HEAD:main
          cd ..

      - name: build arch
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 arch
          rm -rf source/arch
          cd output
          git add arch
          git commit --allow-empty -m "update arch"
          git push origin HEAD:main
          cd ..

      - name: build debian
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 debian
          rm -rf source/debian
          cd output
          git add debian
          git commit --allow-empty -m "update debian"
          git push origin HEAD:main
          cd ..

      # - name: build epel
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 epel
      #     rm -rf source/epel
      #     cd output
      #     git add epel
      #     git commit --allow-empty -m "update epel"
      #     git push origin HEAD:main
      #     cd ..

      # - name: build fedora
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 fedora
      #     rm -rf source/fedora
      #     cd output
      #     git add fedora
      #     git commit --allow-empty -m "update fedora"
      #     git push origin HEAD:main
      #     cd ..

      - name: build freebsd
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 freebsd
          rm -rf source/freebsd
          cd output
          git add freebsd
          git commit --allow-empty -m "update freebsd"
          git push origin HEAD:main
          cd ..

      # - name: build gentoo
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 gentoo
      #     rm -rf source/gentoo
      #     cd output
      #     git add gentoo
      #     git commit --allow-empty -m "update gentoo"
      #     git push origin HEAD:main
      #     cd ..

      - name: build oracle
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 oracle
          rm -rf source/oracle
          cd output
          git add oracle
          git commit --allow-empty -m "update oracle"
          git push origin HEAD:main
          cd ..

      - name: build redhat
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 redhat
          rm -rf source/redhat
          cd output
          git add redhat
          git commit --allow-empty -m "update redhat"
          git push origin HEAD:main
          cd ..

      # - name: build rocky
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 rocky
      #     rm -rf source/rocky
      #     cd output
      #     git add rocky
      #     git commit --allow-empty -m "update rocky"
      #     git push origin HEAD:main
      #     cd ..

      - name: build suse
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 suse
          rm -rf source/suse
          cd output
          git add suse
          git commit --allow-empty -m "update suse"
          git push origin HEAD:main
          cd ..

      - name: build ubuntu
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 ubuntu
          rm -rf source/ubuntu
          cd output
          git add ubuntu
          git commit --allow-empty -m "update ubuntu"
          git push origin HEAD:main
          cd ..

      # - name: build windows
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 windows
      #     rm -rf source/windows
      #     cd output
      #     git add windows
      #     git commit --allow-empty -m "update windows"
      #     git push origin HEAD:main
      #     cd ..

      # - name: build cargo
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 cargo
      #     rm -rf source/cargo
      #     cd output
      #     git add cargo
      #     git commit --allow-empty -m "update cargo"
      #     git push origin HEAD:main
      #     cd ..

      # - name: build composer
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 composer
      #     rm -rf source/composer
      #     cd output
      #     git add composer
      #     git commit --allow-empty -m "update composer"
      #     git push origin HEAD:main
      #     cd ..

      # - name: build conan
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 conan
      #     rm -rf source/conan
      #     cd output
      #     git add conan
      #     git commit --allow-empty -m "update conan"
      #     git push origin HEAD:main
      #     cd ..

      # - name: build erlang
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 erlang
      #     rm -rf source/erlang
      #     cd output
      #     git add erlang
      #     git commit --allow-empty -m "update erlang"
      #     git push origin HEAD:main
      #     cd ..

      # - name: build golang
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 golang
      #     rm -rf source/golang
      #     cd output
      #     git add golang
      #     git commit --allow-empty -m "update golang"
      #     git push origin HEAD:main
      #     cd ..

      # - name: build maven
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 maven
      #     rm -rf source/maven
      #     cd output
      #     git add maven
      #     git commit --allow-empty -m "update maven"
      #     git push origin HEAD:main
      #     cd ..

      # - name: build npm
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 npm
      #     rm -rf source/npm
      #     cd output
      #     git add npm
      #     git commit --allow-empty -m "update npm"
      #     git push origin HEAD:main
      #     cd ..

      # - name: build nuget
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 nuget
      #     rm -rf source/nuget
      #     cd output
      #     git add nuget
      #     git commit --allow-empty -m "update nuget"
      #     git push origin HEAD:main
      #     cd ..

      # - name: build pip
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 pip
      #     rm -rf source/pip
      #     cd output
      #     git add pip
      #     git commit --allow-empty -m "update pip"
      #     git push origin HEAD:main
      #     cd ..

      # - name: build rubygems
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 rubygems
      #     rm -rf source/rubygems
      #     cd output
      #     git add rubygems
      #     git commit --allow-empty -m "update rubygems"
      #     git push origin HEAD:main
      #     cd ..

      - name: build cwe
        if: ${{ success() || failure() }}
        run: |
          vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 cwe
          rm -rf source/cwe
          cd output
          git add cwe
          git commit --allow-empty -m "update cwe"
          git push origin HEAD:main
          cd ..

      # - name: build capec
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 capec
      #     rm -rf source/capec
      #     cd output
      #     git add capec
      #     git commit --allow-empty -m "update capec"
      #     git push origin HEAD:main
      #     cd ..

      # - name: build attack
      #   if: ${{ success() || failure() }}
      #   run: |
      #     vuls-data-update build --rm-vuln-dir=false --source-compress-format=bzip2 --destination-compress-format=bzip2 attack
      #     rm -rf source/attack
      #     cd output
      #     git add attack
      #     git commit --allow-empty -m "update attack"
      #     git push origin HEAD:main
      #     cd ..

      - name: update output submodule commit
        run: |
          git pull
          git add output
          git commit -m "chore(ci): update output submodule"
          git push
