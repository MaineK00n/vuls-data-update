name: Extract(Nightly)
on:
  workflow_run:
    workflows: [Fetch]
    types:
      - completed
  workflow_dispatch:

jobs:
  extract-main:
    name: extract vuls-data-extracted-${{ matrix.target }}@nightly
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - "alma-errata"
          - "alma-osv"
          # - "alma-oval"
          - "alpine-secdb"
          - "alpine-osv"
          - "amazon"
          # - "android-osv"
          - "arch"
          # - "attack"
          # - "bitnami-osv"
          # - "capec"
          # - "cargo-ghsa"
          # - "cargo-osv"
          # - "cargo-db"
          # - "chainguard-osv"
          # - "composer-ghsa"
          # - "composer-glsa"
          # - "composer-osv"
          # - "composer-db"
          # - "conan-glsa"
          # - "cwe"
          # - "debian-osv"
          # - "debian-oval"
          # - "debian-security-tracker-api"
          # - "debian-security-tracker-salsa"
          - "epss"
          # - "erlang-ghsa"
          # - "erlang-osv"
          # - "exploit-exploitdb"
          # - "exploit-github"
          # - "exploit-inthewild"
          # - "exploit-trickest"
          # - "fedora"
          # - "fortinet-handmade"
          # - "fortinet-cvrf"
          - "freebsd"
          # - "gentoo"
          # - "ghactions-osv"
          # - "git-osv"
          # - "golang-ghsa"
          # - "golang-glsa"
          # - "golang-osv"
          # - "golang-db"
          # - "golang-vulndb"
          # - "haskell-osv"
          # - "jvn-feed-detail"
          # - "jvn-feed-product"
          # - "jvn-feed-rss"
          - "kev"
          # - "linux-osv"
          # - "maven-ghsa"
          # - "maven-glsa"
          # - "maven-osv"
          # - "mitre-cvrf"
          # - "mitre-v4"
          - "mitre-v5"
          # - "msf"
          # - "netbsd"
          # - "npm-ghsa"
          # - "npm-glsa"
          # - "npm-osv"
          # - "npm-db"
          # - "nuget-ghsa"
          # - "nuget-glsa"
          # - "nuget-osv"
          # - "nvd-api-cpe"
          # - "nvd-feed-cve"
          # - "nvd-feed-cpe"
          # - "nvd-feed-cpematch"
          - "oracle"
          # - "oss-fuzz-osv"
          # - "perl-db"
          # - "pip-ghsa"
          # - "pip-glsa"
          # - "pip-osv"
          # - "pip-db"
          # - "pub-ghsa"
          # - "pub-osv"
          # - "r-osv"
          # - "redhat-cve"
          # - "redhat-csaf"
          # - "redhat-cvrf"
          # - "redhat-vex"
          # - "redhat-osv"
          - "rocky-errata"
          # - "rocky-osv"
          # - "rubygems-ghsa"
          # - "rubygems-glsa"
          # - "rubygems-osv"
          # - "rubygems-db"
          # - "snort"
          # - "suse-oval"
          # - "suse-cvrf"
          # - "suse-cvrf-cve"
          # - "suse-csaf"
          # - "suse-csaf-vex"
          # - "suse-osv"
          # - "swift-ghsa"
          # - "swift-osv"
          # - "ubuntu-oval"
          # - "ubuntu-cve-tracker"
          # - "ubuntu-osv"
          # - "vulncheck-kev"
          # - "windows-bulletin"
          # - "windows-cvrf"
          # - "windows-msuc"
          # - "windows-wsusscn2"
          # - "wolfi-osv"
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 32768
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: nightly

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: go install
        run: go install ./cmd/vuls-data-update

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          owner: vulsio
          repositories: "vuls-data-extracted-${{ matrix.target }}"

      - name: Check out raw repository
        uses: actions/checkout@v4
        with:
          repository: vulsio/vuls-data-raw-${{ matrix.target }}
          path: vuls-data-raw-${{ matrix.target }}

      - name: Check out extracted repository
        uses: actions/checkout@v4
        with:
          repository: vulsio/vuls-data-extracted-${{ matrix.target }}
          path: vuls-data-extracted-${{ matrix.target }}
          ref: nightly
          token: ${{ steps.app-token.outputs.token }}

      - name: Extract
        run: vuls-data-update extract ${{ matrix.target }} --dir vuls-data-extracted-${{ matrix.target }} vuls-data-raw-${{ matrix.target }}

      - name: Split Large Files
        run: find vuls-data-extracted-${{ matrix.target }} -name "*.json" -size +50M | xargs -I {} sh -c "split -a 3 -d -b 50m {} {}. && rm {}"

      - name: set Git config
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Push
        run: |
          cd vuls-data-extracted-${{ matrix.target }}
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "update"
            git push
          fi

  extract-redhat-oval:
    name: extract vuls-data-extracted-${{ matrix.target }}@nightly
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - "redhat-ovalv1"
          - "redhat-ovalv2"
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 32768
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: nightly

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: go install
        run: go install ./cmd/vuls-data-update

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          owner: vulsio
          repositories: "vuls-data-extracted-${{ matrix.target }}"

      - name: Check out vulsio/vuls-data-raw-${{ matrix.target }} repository
        uses: actions/checkout@v4
        with:
          repository: vulsio/vuls-data-raw-${{ matrix.target }}
          path: vuls-data-raw-${{ matrix.target }}

      - name: Check out vulsio/vuls-data-raw-redhat-oval-repository-to-cpe repository
        uses: actions/checkout@v4
        with:
          repository: vulsio/vuls-data-raw-redhat-oval-repository-to-cpe
          path: vuls-data-raw-redhat-oval-repository-to-cpe

      - name: Check out extracted repository
        uses: actions/checkout@v4
        with:
          repository: vulsio/vuls-data-extracted-${{ matrix.target }}
          path: vuls-data-extracted-${{ matrix.target }}
          ref: nightly
          token: ${{ steps.app-token.outputs.token }}

      - name: Extract
        run: vuls-data-update extract ${{ matrix.target }} --dir vuls-data-extracted-${{ matrix.target }} vuls-data-raw-${{ matrix.target }} vuls-data-raw-redhat-oval-repository-to-cpe

      - name: Split Large Files
        run: find vuls-data-extracted-${{ matrix.target }} -name "*.json" -size +50M | xargs -I {} sh -c "split -a 3 -d -b 50m {} {}. && rm {}"

      - name: set Git config
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Push
        run: |
          cd vuls-data-extracted-${{ matrix.target }}
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "update"
            git push
          fi

  extract-nvd-api-cve:
    name: extract vuls-data-extracted-nvd-api-cve@nightly
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 32768
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: nightly

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: go install
        run: go install ./cmd/vuls-data-update

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          owner: vulsio
          repositories: "vuls-data-extracted-nvd-api-cve"

      - name: Check out raw repository, CVE
        uses: actions/checkout@v4
        with:
          repository: vulsio/vuls-data-raw-nvd-api-cve
          path: vuls-data-raw-nvd-api-cve

      - name: Check out raw repository, CPEMATCH
        uses: actions/checkout@v4
        with:
          repository: vulsio/vuls-data-raw-nvd-api-cpematch
          path: vuls-data-raw-nvd-api-cpematch

      - name: Check out extracted repository
        uses: actions/checkout@v4
        with:
          repository: vulsio/vuls-data-extracted-nvd-api-cve
          path: vuls-data-extracted-nvd-api-cve
          ref: nightly
          token: ${{ steps.app-token.outputs.token }}

      - name: Extract
        run: vuls-data-update extract nvd-api-cve --dir vuls-data-extracted-nvd-api-cve vuls-data-raw-nvd-api-cve vuls-data-raw-nvd-api-cpematch

      - name: Split Large Files
        run: find vuls-data-extracted-nvd-api-cve -name "*.json" -size +50M | xargs -I {} sh -c "split -a 3 -d -b 50m {} {}. && rm {}"

      - name: set Git config
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Push
        run: |
          cd vuls-data-extracted-nvd-api-cve
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "update"
            git push
          fi

  extract-eol:
    name: extract vuls-data-extracted-eol@nightly
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 32768
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: nightly

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: go install
        run: go install ./cmd/vuls-data-update

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          owner: vulsio
          repositories: "vuls-data-extracted-eol"

      - name: Check out extracted repository
        uses: actions/checkout@v4
        with:
          repository: vulsio/vuls-data-extracted-eol
          path: vuls-data-extracted-eol
          ref: nightly
          token: ${{ steps.app-token.outputs.token }}

      - name: Extract
        run: vuls-data-update extract eol --dir vuls-data-extracted-eol

      - name: Split Large Files
        run: find vuls-data-extracted-eol -name "*.json" -size +50M | xargs -I {} sh -c "split -a 3 -d -b 50m {} {}. && rm {}"

      - name: set Git config
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Push
        run: |
          cd vuls-data-extracted-eol
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "update"
            git push
          fi

  extract-redhat-ovalv2-rhel:
    name: extract vuls-data-extracted-redhat-ovalv2-rhel@nightly
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 32768
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: nightly

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: go install
        run: go install ./cmd/vuls-data-update

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          owner: vulsio
          repositories: "vuls-data-extracted-redhat-ovalv2-rhel"

      - name: Check out vulsio/vuls-data-raw-redhat-ovalv2 repository
        uses: actions/checkout@v4
        with:
          repository: vulsio/vuls-data-raw-redhat-ovalv2
          path: vuls-data-raw-redhat-ovalv2

      - name: remove unnecessary streams
        run: |
          rm -rf vuls-data-raw-redhat-ovalv2/5
          find vuls-data-raw-redhat-ovalv2/6 -mindepth 1 -maxdepth 1 ! -name 'rhel-6-including-unpatched' ! -name 'rhel-6-extras-including-unpatched' ! -name 'rhel-6-supplementary' ! -name 'rhel-6-els' | xargs rm -rf
          find vuls-data-raw-redhat-ovalv2/7 -mindepth 1 -maxdepth 1 ! -name 'rhel-7-including-unpatched' ! -name 'rhel-7-extras-including-unpatched' ! -name 'rhel-7-supplementary' | xargs rm -rf
          find vuls-data-raw-redhat-ovalv2/8 -mindepth 1 -maxdepth 1 ! -name 'rhel-8-including-unpatched' | xargs rm -rf
          find vuls-data-raw-redhat-ovalv2/9 -mindepth 1 -maxdepth 1 ! -name 'rhel-9-including-unpatched' | xargs rm -rf

      - name: Check out vulsio/vuls-data-raw-redhat-oval-repository-to-cpe repository
        uses: actions/checkout@v4
        with:
          repository: vulsio/vuls-data-raw-redhat-oval-repository-to-cpe
          path: vuls-data-raw-redhat-oval-repository-to-cpe

      - name: replace empty repository-to-cpe data
        run: |
          echo "{}" > vuls-data-raw-redhat-oval-repository-to-cpe/repository-to-cpe.json

      - name: Check out extracted repository
        uses: actions/checkout@v4
        with:
          repository: vulsio/vuls-data-extracted-redhat-ovalv2-rhel
          path: vuls-data-extracted-redhat-ovalv2-rhel
          ref: nightly
          token: ${{ steps.app-token.outputs.token }}

      - name: Extract
        run: vuls-data-update extract redhat-ovalv2 --dir vuls-data-extracted-redhat-ovalv2-rhel vuls-data-raw-redhat-ovalv2 vuls-data-raw-redhat-oval-repository-to-cpe

      - name: Split Large Files
        run: find vuls-data-extracted-redhat-ovalv2-rhel -name "*.json" -size +50M | xargs -I {} sh -c "split -a 3 -d -b 50m {} {}. && rm {}"

      - name: set Git config
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Push
        run: |
          cd vuls-data-extracted-redhat-ovalv2-rhel
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "update"
            git push
          fi
